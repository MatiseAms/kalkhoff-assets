
.calculateRem(@size) {
  @remSize: @size / @base-font-size,px;
  @calculateRem: @remSize * 1rem;
}

.convert-to-rem(@value, @base-value: @rem-base)  {
  @value: strip-unit(@value) / strip-unit(@base-value) * 1rem;
  & when (@value == 0rem) { @value: 0; } // Turn 0rem into 0
  @convert-to-rem: @value;
}

.rem-calc(@values, @base-value: @base-font-size) {
	@max: length(@values);
	& when @max == 1 {
		.convert-to-rem(extract(@values, 1), @base-value)
		@rem-calc: @convert-to-rem;
	}

	@remValues: ();

	@for @i from 1 through @max {
		.convert-to-rem(extract(@values, @i), @base-value))
		@remValues: append(@remValues, @convert-to-rem;
	}

	@rem-calc: @remValues;
}
.rem(@value){
  @sizes: null;
  & when length(@value) > 1{
    @each @size in @value{
	  .rem-calc(@size);
      @sizes: @sizes @rem-calc;
    }
  }  
  & when not length(@value) > 1{

	.rem-calc(@value);
  	@sizes: @rem-calc;
  }
	@rem: @sizes;
}
.space(@value){
  @sizes: null;
  & when length(@value) > 1{
    @each @size in @value{
	  .rem(@size * @space)
      @sizes: @sizes @rem;
    }
  } 
  & when not length(@value) > 1{
	.rem(@value * @space);
  	@sizes: @rem;
  }
	@space: @sizes;
}

.spc(@value){
  @size: space(@value);
  @spc: @size;
}
