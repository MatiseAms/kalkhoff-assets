
@function map-collect($maps...){
	$collection: ();

	@each $map in $maps{
		$collection: map-merge($collection, $map);
	}
	@return $collection;
}
@function flatten($value,$separator,$replace){
	$v: str-replace(to-string($value,$separator),$replace," ");
	@return $v;
}
@function str-to-list($string, $separator: ".", $startAt: 1){
	$string: str-replace($string,"__","."); //
	$string: str-replace($string,"--","."); //
	$string: str-replace($string,"_","."); //

	$workStr: str-slice($string,$startAt); $list: (); $indexOfFirstSpace: str-index($workStr,$separator);
	@if $indexOfFirstSpace == null{
		$list: ($workStr);
	} @else{
		$list: (str-slice($workStr, 1, $indexOfFirstSpace - 1)); //
		$list: join($list,str-to-list($workStr, $separator, $startAt: $indexOfFirstSpace + 1));
	}
	@return $list;
}


// List Functions

@function prepend($list, $value){
	@return join($value, $list);
}

@function to-string($list, $glue: "", $is-nested: false){
	$result: null;

	@for $i from 1 through length($list){
		$e: nth($list, $i);

		@if type-of($e) == list{
			$result: $result#{to-string($e, $glue, true)};
		}

		@else{
			$result: if($i != length($list) or $is-nested, $result#{$e}#{$glue},$result#{$e});
		}
	}

	@return $result;
}
@function to-list($value){
	@return if(type-of($value) != list, ($value,), $value);
}

@function from-map($map,$key){
	@each $l1 in $map{
		@debug "//////////---------------";
		@debug type-of($l1);
		@debug "//////////---------------";
		@if $l1 == $key{
			@debug $l1;
			@debug $key;
			@return $l1;
		} @else if type-of($l1) == "map"{
			@each $l2 in $l1{
				@if $l2 == $key{
					@debug $l2;
					@debug $key;
					@return $l2;
				} @else if type-of($l2) == "map"{
					@each $l3 in $l2{
						@if $l3 == $key{
							@return $l3;
						}
					}
				}
			}
		}
	}

	@return "hoi";
}
