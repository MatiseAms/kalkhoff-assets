//
//  Matise color functions
//  _____________________________________________

.setColorByKey(@needle, @property, @index: 1, @list: 'primary') {
	& when (@list = 'primary') {
		& when (@index < length(@assets-colors-primary)) {
			@colorSet: @assets-colors-primary;
			@key: extract(extract(@colorSet, @index), 1);
			@value: extract(extract(@colorSet, @index), 2);

			& when (@needle = @key) {
				@{property}: @value;
			}

			.setColorByKey(@needle, @property, @index + 1, 'primary');
		}

		& when (@index = length(@assets-colors-primary)) {
			@colorSet: @assets-colors-primary;
			@key: extract(extract(@colorSet, @index), 1);
			@value: extract(extract(@colorSet, @index), 2);

			& when (@needle = @key) {
				@{property}: @value;
			}

			.setColorByKey(@needle, @property, 1, 'secondary');
		}
	}

	& when (@list = 'secondary') {
		& when (@index < length(@assets-colors-secondary)) {
			@colorSet: @assets-colors-secondary;
			@key: extract(extract(@colorSet, @index), 1);
			@value: extract(extract(@colorSet, @index), 2);

			& when (@needle = @key) {
				@{property}: @value;
			}

			.setColorByKey(@needle, @property, @index + 1, 'secondary');
		}
	}
}

.setColorInProperty(@color, @property, @value: ~'') {
	& when (@value = ~'') {
			@{property}: @color;
	}

	& when not (@value = ~'') {
		@formattedValue: replace(e(@value), '%%color%%', @color);

			@{property}: e(@formattedValue);
	}
}

.setShadeInProperty(@color, @percentage, @property, @value: ~'') {
	@colorMix: mix(black, @color, @percentage);

	& when (@value = ~'') {
		@{property}: @colorMix;
	}

	& when not (@value = ~'') {
		@formattedValue: replace(e(@value), '%%color%%', @colorMix);

		@{property}: @formattedValue;
	}
}

.setTintInProperty(@color, @percentage, @property, @value: ~'') {
	@colorMix: mix(white, @color, @percentage);

	& when (@value = ~'') {
			@{property}: @colorMix;
	}

	& when not (@value = ~'') {
		@formattedValue: replace(e(@value), '%%color%%', @colorMix);

			@{property}: @formattedValue;
	}
}

.setNativeRgbaInProperty(@hexCode, @opacity, @property) {
	@{property}: rgba(red(@hexCode), green(@hexCode), blue(@hexCode), @opacity);
}

//
//.color-brightness(@color,@percentage: true){
//	@sum: red(@color) + green(@color) + blue(@color);  // sum
//	@average: (((red(@color) / 255) * 100) + ((green(@color) / 255) * 100) + ((blue(@color) / 255) * 100)) / 3; // average
//
//	& when @percentage{
//		@color-brightness 100% * (@sum / (255*3));
//	}
//	& when not @percentage{
//	//	@debug (@sum / (255*3) * 100);
//		@color-brightness: (@sum / (255*3) * 100);
//	}
//}
//
//
//.contra(@value, @contrast: 50, @dark: color(Black), @light: color(White)){
//	@color: black;
//	.color-exist(@value);
//	& when @color-exist{
//		@contra: color(@value);
//	}
//	& when {
//		@contra: @value;
//	}
//	.color-brightness(@color);
//	& when @color-brightness > @contrast{
//		@contra: @dark;
//	} @else{
//		@contra: @light;
//	}
//}