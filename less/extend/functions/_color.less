//
//  Matise color functions
//  _____________________________________________

.loopColors(@callback, @index: 1, @list: 'primary') {
	& when (@list = 'primary') {

		& when (@index < length(@assets-colors-primary)) {
			@colorSet: @assets-colors-primary;
			@key: extract(extract(@colorSet, @index), 1);
			@value: extract(extract(@colorSet, @index), 2);

			@callback();

			.loopColors(@callback, @index + 1,'primary');
		}

		& when (@index = length(@assets-colors-primary)) {
			@colorSet: @assets-colors-primary;
			@key: extract(extract(@colorSet, @index), 1);
			@value: extract(extract(@colorSet, @index), 2);

			@callback();

			.loopColors(@callback, 1, 'secondary');
		}
	}

	& when (@list = 'secondary') {
		& when (@index <= length(@assets-colors-secondary)) {
			@colorSet: @assets-colors-secondary;
			@key: extract(extract(@colorSet, @index), 1);
			@value: extract(extract(@colorSet, @index), 2);

			@callback();

			.loopColors(@callback, @index + 1, 'secondary');
		}
	}
}

.setColor(@color, @property, @byKey: false, @where: ~'') {
	& when (@byKey = true) {
		@callback: {
			& when (@color = @key) {
				.formatOutput(@property, @value, @where);
			}
		};

		.loopColors(@callback);
	}

	& when not (@byKey = true) {
		.formatOutput(@property, @color, @where);
	}
}

.setShade(@color, @percentage, @property, @byKey: false, @where: ~'') {
	& when (@byKey = true) {
		@callback: {
			& when (@color = @key) {
				@colorMix: mix(black, @color, @percentage);

				.formatOutput(@property, @colorMix, @where);
			}
		};

		.loopColors(@callback);
	}

	& when not (@byKey = true) {
		@colorMix: mix(black, @color, @percentage);

		.formatOutput(@property, @colorMix, @where);
	}
}

.setTint(@color, @percentage, @property, @byKey: false, @where: ~'') {
	& when (@byKey = true) {
		@callback: {
			& when (@color = @key) {
				@colorMix: mix(white, @color, @percentage);

				.formatOutput(@property, @colorMix, @where);
			}
		};

		.loopColors(@callback);
	}

	& when not (@byKey = true) {
		@colorMix: mix(white, @color, @percentage);

		.formatOutput(@property, @colorMix, @where);
	}
}

.setNativeRgba(@color, @opacity, @property, @byKey: false, @where: ~'') {
	& when (@byKey = true) {
		@callback: {
			& when (@color = @key) {
				@rgbaColor: rgba(red(@color), green(@color), blue(@color), @opacity);

				.formatOutput(@property, @rgbaColor, @where);
			}
		};

		.loopColors(@callback);
	}

	& when not (@byKey = true) {
		@rgbaColor: rgba(red(@color), green(@color), blue(@color), @opacity);

		.formatOutput(@property, @rgbaColor, @where);
	}
}

//
//.color-brightness(@color,@percentage: true){
//	@sum: red(@color) + green(@color) + blue(@color);  // sum
//	@average: (((red(@color) / 255) * 100) + ((green(@color) / 255) * 100) + ((blue(@color) / 255) * 100)) / 3; // average
//
//	& when @percentage{
//		@color-brightness 100% * (@sum / (255*3));
//	}
//	& when not @percentage{
//	//	@debug (@sum / (255*3) * 100);
//		@color-brightness: (@sum / (255*3) * 100);
//	}
//}
//
//
//.contra(@value, @contrast: 50, @dark: color(Black), @light: color(White)){
//	@color: black;
//	.color-exist(@value);
//	& when @color-exist{
//		@contra: color(@value);
//	}
//	& when {
//		@contra: @value;
//	}
//	.color-brightness(@color);
//	& when @color-brightness > @contrast{
//		@contra: @dark;
//	} @else{
//		@contra: @light;
//	}
//}