
// Calculations
.pow(@number, @exp){
	@value: 1;
	& when @exp > 0{
		@for @i from 1 through @exp{
			@value: @value * @number;
		}
	}
	& when if @exp < 0{
		@for @i from 1 through -@exp{
			@value: @value / @number;
		}
	}
	@pow: @value;
}

.fact(@number){
	@value: 1;
	& when @number > 0{
		@for @i from 1 through @number{
			@value: @value * @i;
		}
	}
	@fact: @value;
}

.pi(){
	@pi: 3.14159265359;
}

.rad(@angle){
	@unit: unit(@angle); @unitless: @angle / (@angle * 0 + 1);
	// If the angle has 'deg' as unit, convert to radians.
	& when @unit == deg{
		@unitless: @unitless / 180 * pi();
	}
	@rad: @unitless;
}

.sin(@angle){
	@sin: 0; @angle: rad(@angle);
	// Iterate a bunch of times.
	@for @i from 0 through 10{
		@sin: @sin + pow(-1, @i) * pow(@angle, (2 * @i + 1)) / fact(2 * @i + 1);
	}
	@sin: @sin;
}

.cos(@angle){
	@cos: 0; @angle: rad(@angle);
	// Iterate a bunch of times.
	@for @i from 0 through 10{
		@cos: @cos + pow(-1, @i) * pow(@angle, 2 * @i) / fact(2 * @i);
	}
	@cos: @cos;
}

.tan(@angle){
	@tan: sin(@angle) / cos(@angle);
}


.decimal-round(@number, @digits: 0, @mode: round){
	@n: 1;
	// @number must be a number
	& when not type-of(@number) == number{
		// @warn "#{@number} is not a number.";
		@decimal-round: @number;
	}
	// @digits must be a unitless number
	& when type-of(@digits) != number{
		// @warn "#{ @digits} is not a number.";
		@decimal-round: @number;
	} & when if not unitless(@digits){
		// @warn "#{@digits} has a unit.";
		@decimal-round: @number;
	}
	@for @i from 1 through @digits{
		@n: @n * 10;
	}
	& when @mode == round{
		@decimal-round: round(@number * @n) / @n;
	} & when if @mode == ceil{
		@decimal-round: ceil(@number * @n) / @n;
	} & when if @mode == floor{
		@decimal-round: floor(@number * @n) / @n;
	} @else{
		// @warn "#{@mode} is undefined keyword.";
		@decimal-round: @number;
	}
}
.decimal-ceil(@number, @digits: 0){
	@decimal-ceil: decimal-round(@number, @digits, ceil);
}
.decimal-floor(@number, @digits: 0){
	@decimal-floor: decimal-round(@number, @digits, floor);
}
