
.map-collect(@maps...){
	@collection: ();

	@each @map in @maps{
		@collection: map-merge(@collection, @map);
	}
	@map-collect: @collection;
}
.flatten(@value,@separator,@replace){
	.to-string(@value,@separator);
	.str-replace(@to-string,@replace," ");
	@flatten: @str-replace;
}

.str-to-list(@string, @separator: ".", @startAt: 1){
	@string: str-replace(@string,"__","."); //
	@string: str-replace(@string,"--","."); //
	@string: str-replace(@string,"_","."); //

	@workStr: str-slice(@string,@startAt);
  @list: ();
  @indexOfFirstSpace: str-index(@workStr,@separator);
	@if @indexOfFirstSpace == null{
		@list: (@workStr);
	} @else{
		@list: (str-slice(@workStr, 1, @indexOfFirstSpace - 1)); //
		@list: join(@list,str-to-list(@workStr, @separator, @startAt: @indexOfFirstSpace + 1));
	}
	@str-to-list: @list;
}


// List Functions

.prepend(@list, @value) {
	@prepend: join(@value, @list);
}

.to-string(@list, @glue: '', @is-nested: false) {
  @result: null;

  @for @i from 1 through length(@list) {
    @e: nth(@list, @i);

    @if type-of(@e) == list {
	  .to-string(@e, @glue, true)
      @result: @result@to-string;
    }

    @else {
      @result: if(@i != length(@list) or @is-nested, @result#{@e}#{@glue},@result#{@e});
    }
  }
  @to-string: @result;
}
.to-list(@value) {
	& when not type-of(@value == list){
		@value: @value; 
	} 
	& when type-of(@value == list){
		@value: @value; 
	} 
	@to-list: @value
}
