//
//  Matise color functions
//  _____________________________________________

//
//  Loop through primary and secondary colors and calls given callback
//  ---------------------------------------------

.loopColors(@callback, @index: 1, @list: 'primary') {
	@loopColors-pattern-01: {
		@key: extract(extract(@colorSet, @index), 1);
		@value: extract(extract(@colorSet, @index), 2);

		@callback();
	};

	& when (@list = 'primary') {
		& when (@index < length(@colors-primary)) {
			@colorSet: @colors-primary;

			@loopColors-pattern-01();

			.loopColors(@callback, @index + 1,'primary');
		}

		& when (@index = length(@colors-primary)) {
			@colorSet: @colors-primary;

			@loopColors-pattern-01();

			.loopColors(@callback, 1, 'secondary');
		}
	}

	& when (@list = 'secondary') {
		& when (@index <= length(@colors-secondary)) {
			@colorSet: @colors-secondary;

			@loopColors-pattern-01();

			.loopColors(@callback, @index + 1, 'secondary');
		}
	}
}

//
//  If parameter @byKey is set to true, sets given @property to the color matching given @color key
//  ---------------------------------------------

.setColor(@color, @property, @byKey: false, @where: ~'') {
	& when (@byKey = true) {
		@callback: {
			& when (@color = @key) {
				.formatOutput(@property, @value, @where);
			}
		};

		.loopColors(@callback);
	}

	& when not (@byKey = true) {
		.formatOutput(@property, @color, @where);
	}
}

//
//  If parameter @byKey is set to true, sets given @property to the color matching given color key and applies given shade @percentage
//  ---------------------------------------------

.setShade(@color, @percentage, @property, @byKey: false, @where: ~'') {
	& when (@byKey = true) {
		@callback: {
			& when (@color = @key) {
				@colorMix: mix(black, @color, @percentage);

				.formatOutput(@property, @colorMix, @where);
			}
		};

		.loopColors(@callback);
	}

	& when not (@byKey = true) {
		@colorMix: mix(black, @color, @percentage);

		.formatOutput(@property, @colorMix, @where);
	}
}

//
//  If parameter @byKey is set to true, sets given @property to the color matching color key and applies given tint @percentage
//  ---------------------------------------------

.setTint(@color, @percentage, @property, @byKey: false, @where: ~'') {
	& when (@byKey = true) {
		@callback: {
			& when (@color = @key) {
				@colorMix: mix(white, @color, @percentage);

				.formatOutput(@property, @colorMix, @where);
			}
		};

		.loopColors(@callback);
	}

	& when not (@byKey = true) {
		@colorMix: mix(white, @color, @percentage);

		.formatOutput(@property, @colorMix, @where);
	}
}

//
//  If parameter @byKey is set to true, sets given @property to the matching color key converted to rgba (using given @opacity)
//  ---------------------------------------------

.setNativeRgba(@color, @opacity, @property, @byKey: false, @where: ~'') {
	& when (@byKey = true) {
		@callback: {
			& when (@color = @key) {
				@rgbaColor: rgba(red(@color), green(@color), blue(@color), @opacity);

				.formatOutput(@property, @rgbaColor, @where);
			}
		};

		.loopColors(@callback);
	}

	& when not (@byKey = true) {
		@rgbaColor: rgba(red(@color), green(@color), blue(@color), @opacity);

		.formatOutput(@property, @rgbaColor, @where);
	}
}

//
//  Gets amount of brightness in given color (int or percentage value) and uses it in given callback
//  ---------------------------------------------
.getColorBrightness(@targetColor, @percentage: false, @byKey: false, @callback) {

	//	Debugging is possible but only in grunt (and maybe gulp with some plugin) using JS expressions in less code,
	//  probably worst practice ever and could give problems with server side compilation in Magento, we'll need to find some other way

	//  @average: (((red(@color) / 255) * 100) + ((green(@color) / 255) * 100) + ((blue(@color) / 255) * 100)) / 3;
	//	@debug: `(function() { console.log("@{average}")})()`

	@getColorBrightness-pattern-01: {
		& when (@percentage = true) {
			@color-brightness: 100% * (@sum / (255*3));
			@callback();
		}

		& when not (@percentage = true) {
			@color-brightness: (@sum / (255 * 3) * 100);
			@callback();
		}
	};

	& when (@byKey = true) {
		@colorLoopCallback: {
			& when (@targetColor = @key) {
				@color: @value;
				@sum: red(@color) + green(@color) + blue(@color);

				@getColorBrightness-pattern-01();
			}
		};

		.loopColors(@colorLoopCallback);
	}

	& when not (@byKey= true) {
		@color: @targetColor;
		@sum: red(@color) + green(@color) + blue(@color);

		@getColorBrightness-pattern-01();
	}
}

//	WIP: usage and purpose of this function are unclear
//
//.contra(@value, @contrast: 50, @dark: color(Black), @light: color(White)){
//	@color: black;
//	.color-exist(@value);
//	& when @color-exist{
//		@contra: color(@value);
//	}
//	& when {
//		@contra: @value;
//	}
//	.color-brightness(@color);
//	& when @color-brightness > @contrast{
//		@contra: @dark;
//	} @else{
//		@contra: @light;
//	}
//}